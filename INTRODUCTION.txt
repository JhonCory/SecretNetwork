This file explains the idea behind the Secret Network simulation, its stipulations, and how to make test runs of the simulation. For detailed explanations of the security methods beneath the code which work to guarantee the security of the secrets, see the security-specific file, SECURITY.txt.

=====================================================================================
=====================================================================================
			      WHAT IS THE SECRET NETWORK?
=====================================================================================
=====================================================================================

The Secret Network is a simulation of a system in which a set of common users are allowed to store a single secret on a private server (called the SecretServer). To access their secret, users must authenticate themselves to the SecretServer by sending their password and (valid) username while using their personal account (the reasoning for which is explained in SECURITY.txt). Once the user is logged into the server, they may view, update, or delete their secret by sending appropriate messages to the SecretServer. Any changes made to the secret are stored persistently. No manner of changing a valid user's password, adding/removing valid users, or updating RSA keys has been included in this simulation.


=====================================================================================
=====================================================================================
			     STIPULATIONS OF THE SIMULATION
=====================================================================================
=====================================================================================

Obviously, Secret Network is a simulation of the real thing; instead of the user passing a message to the SecretServer through a network, it calls the SecretServer object's getMessage method. As such, there are several assumptions that must be made:

- We assume that there is a finite pool of "valid users", who are the only users allowed to use the Secret Network to securely store a secret.
- Each valid user has a single secret associated with their username; deleting the secret merely replaces the secret with an empty string.
- The list of valid users stored in validusers.txt is not a closely-kept secret, and can be assumed to be relatively widely accessible without fear of security risks.
- Each valid user has full access to the data stored in publickeys.txt, a file which contains the public RSA keys of every valid user, as well as the SecretServer.
- Each individual private RSA key (all of which may be found in privatekeys.txt for the convenience of configuring this simulation) are stored that valid user's personal account/system, and are not accessible by said user from another user's account/system.
- The valid users' secrets stored in secrets.txt are resources accessible only by the SecretServer object.
- The password digests stored in hashes.txt are accessible only by the SecretServer object.
- As the messages don't travel through the network, there is an implied assumption that the User and the SecretServer always get some sort of response after sending a message to the other, even if it's a forged or "bad" response. 
- We stipulate that passwords must be at least eight characters long, contain at least one number or special character, and contain both upper- and lower-case letters. 


=====================================================================================
=====================================================================================
			      HOW TO RUN THE SIMULATION	
=====================================================================================
=====================================================================================

The main method for the Secret Network simulation is found in Interface.java. It takes two arguments: the name of a valid user and a boolean for Simulation Mode. I recommend starting with "java Interface Alice false" for your first run.

1. The name of the valid user that you use as an argument specifies from which valid user's account/system you are going to connect to the SecretServer. When you start the simulation, you will be prompted for a username which you will send the SecretServer as the valid user as whom you wish to log in. However, due to each valid user having access to their own private RSA key only on their own personal account/system, attempting to log in as Alice from Bob's account/system will result in an error (for more details, see the "Bilateral Authentication" section of SECURITY.txt). As such, don't expect to be able to run "java Interface Bob false" and then log in using "Alice" as the username.

2. Simulation Mode is somewhat like a debug mode, but with much less detail. It offers a little more insight on the relatively complex inner workings of the simulation, but without entirely flooding the CLI. Set it to "true" if you wish to get a peek under the windshield, "false" if you want a more authentic user experience.

Here's a list of all valid users and their associated passwords:

1. Alice	S3cr3tSc4rySk3l3t0ns 
2. Bob		CoolDude1993
3. Carly 	HL3borealis
4. Dave		Sandv1chMann
5. Earl		666devi]]edEGG$

Have fun! 


=====================================================================================
=====================================================================================
=====================================================================================
=====================================================================================

This software was written by John Khouri in 2016 as part of a coding challenge for Illumio.