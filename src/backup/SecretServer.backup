import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.xml.bind.DatatypeConverter;

/** Represents the server which handles requests for accessing secrets. */
public class SecretServer {
	private final String secretsfn;
	private final String hashfn;
	private final String pubkeysfn;
	private final String privkeysfn;
	private final String validusersfn;
	private final boolean simMode;
	private final String[] validUsers; // registered users of this system
	private BigInteger my_d; // second half of SecretServer's private key
	private BigInteger my_n; // first half of SecretServer's public key
	private int my_e; // second half of SecretServer's public key
	private BigInteger[] usersPubKeys1; // stores n-vals for regist. users
	private int[] usersPubKeys2; // stores e-values for registered users
	private String myNonce; // temporary nonce made by server for auth. protocol
	private String currentUser;
	private byte[] currentPassword;
	private String currentSessionKey; 
	private boolean userSet; // is there a currentUser?
	private boolean passVerified; // does currentUser have a verified password?
	private boolean activeSession; // is currentSessionKey agreed upon?
	private int counter; // to be included in the next payload SecretServer sends

	public SecretServer(boolean simMode) {
		this.simMode = simMode;

		secretsfn = "secrets.txt";
		hashfn = "passwords.txt";
		pubkeysfn = "publickeys.txt";
		privkeysfn = "privatekeys.txt";
		validusersfn = "validusers.txt";

		validUsers = ComMethods.getValidUsers();
		configureKeys();
		myNonce = null;
		currentUser = null;
		currentPassword = null;
		currentSessionKey = null;
		userSet = false;
		passVerified = false;
		activeSession = false;
		counter = -1;		
	}

	// Interprets input payloads and returns appropriate responses
	public String getMessage(String payload, boolean partOfSession) {
		ComMethods.report("SecretServer received payload and will now process it.", simMode);
		ComMethods.report("Payload is "+payload, true);
		String resp = new String();
		if (partOfSession) {
			if (!activeSession) { // Verify the claimed boolean 
				ComMethods.handleBadResp();
			} else {
				switch (getSessionCommand(payload)) {
					case "password":
						resp = handlePassword(payload);
						break;
					case "view":
						resp = handleView();
						break;
					case "update":
						resp = handleUpdate(payload);
						break;
					case "delete":
						resp = handleDelete();
						break;
					default:
						ComMethods.handleBadResp();
						break;
				}
				counter = counter + 2;
			}
		} else if (!userSet) {
			resp = handleAuthPt1(payload);
		} else {
			resp = handleAuthPt2(payload);
		}
		return resp;
	}


	// Determines the type of command in the (now decrypted) payload
	private String getSessionCommand(String payload) {
		String message = ComMethods.processPayload(currentUser, payload, counter-1, currentSessionKey, true);

		if (message.startsWith("password:") && !passVerified) {
			return "password";
		} else if (passVerified) {
			if (message.startsWith("view")) {
				return "view";
			} else if (message.startsWith("update:")) {
				return "update";
			} else if (payload.startsWith("delete")) {
				return "delete";
			}
		} 
		return "error"; // Failsafe
	}


	// Handles password verif., returns "accepted" or "rejected"
	private String handlePassword(String message) {
		String password = message.substring(message.indexOf(':')+1, message.length());
		passVerified = checkHash(password.getBytes(), ComMethods.getValueFor(currentUser,hashfn));

		if (passVerified) {
			currentPassword = password.getBytes(); // store pw for session
			return ComMethods.preparePayload("SecretServer", "accepted", counter, currentSessionKey, simMode);
		} else {
			return ComMethods.preparePayload("SecretServer", "rejected", counter, currentSessionKey, simMode);
		}
	}


	// Handles view requests, returns the deciphered secret
	private String handleView() {
		String secret = ComMethods.getValueFor(currentUser, secretsfn);
		return ComMethods.preparePayload("SecretServer", secret, counter, currentSessionKey, simMode);
	}


	// Handles update requests, returns "secretupdated" when done
	private String handleUpdate(String message) {
		String newSecret = message.substring(message.indexOf(':')+1, message.length());
		replaceSecretWith(currentUser, newSecret);
		return ComMethods.preparePayload("SecretServer", "secretupdated", counter, currentSessionKey, simMode);
	}


	// Handles delete requests, returns "secretdeleted" when done
	private String handleDelete() {
		replaceSecretWith(currentUser, "");
		return ComMethods.preparePayload("SecretServer", "secretdeleted", counter, currentSessionKey, simMode);
	}



	// Handles second transaction of Bilateral Auth. Protocol
	private String handleAuthPt1(String message) {
		int userNum = -1;
		boolean userIdentified = false;

		while (userNum < validUsers.length && !userIdentified) {
			userNum++;
			userIdentified = message.startsWith(validUsers[userNum]);
		}
		if (!userIdentified) {
			ComMethods.report("SecretServer doesn't recognize name of valid user.", simMode);
			return "error";
		} else {
			// Process second half of message, and verify format
			String supposedUser = validUsers[userNum];
			String secondHalf = message.substring(supposedUser.length(), message.length());
//
	System.out.println("secondHalf = "+secondHalf);
//
			secondHalf = ComMethods.decryptRSA(secondHalf, my_n, my_d);

//
	System.out.println("secondHalf = "+secondHalf);
//
			ComMethods.report("SecretServer has decrypted the second half of the User's message using SecretServer's private RSA key.", simMode);

			if (!secondHalf.startsWith(supposedUser)) {
				ComMethods.report("ERROR ~ invalid first message in protocol.", simMode);				
				return "error";
			} else {
				currentUser = supposedUser; // confirmed legit. user
				String nonce_user = secondHalf.substring(currentUser.length(),secondHalf.length());

				// Second Message: B->A: E_kA(nonce_A || Bob || nonce_B)

				String myNonce = UUID.randomUUID().toString();
				ComMethods.report("SecretServer has randomly generated a 128-bit nonce_srvr = "+myNonce+".", simMode);
			
				String response1 = nonce_user + "SecretServer" + myNonce;
				response1 = ComMethods.encryptRSA(response1, usersPubKeys1[userNum], BigInteger.valueOf(usersPubKeys2[userNum]));

				return response1;
			}
		}
	}



	// Handles fourth transaction of Bilateral Auth. Protocol
	private String handleAuthPt2(String payload) { 
		String message = ComMethods.decryptRSA(payload, my_n, my_d);
		ComMethods.report("SecretServer has decrypted the User's message using SecretServer's private RSA key.", simMode);
		
		if (!message.startsWith(myNonce)) {
			ComMethods.report("ERROR ~ invalid third message in protocol.", simMode);
			return "error";
		} else {
			currentSessionKey = message.substring(myNonce.length(),message.length());

			String responsePayload = ComMethods.preparePayload("SecretServer", "understood", 11, currentSessionKey, simMode);
			counter = 13;
			return responsePayload;
		} 
	}




	// Determines whether a password matches up to the hashed value (digest),
	// using knowledge of the hash function and # of times the hash was stretched
	private boolean checkHash(byte[] password, String hashValue) {
		int hashReps = 1000; // stretch the hash this many times
		String hashAlgorithm = "MD5";

		String endValue = new String();
		try {
			MessageDigest md = MessageDigest.getInstance(hashAlgorithm);
			byte[] value = password;
			for (int i=0; i<hashReps; i++) { 
				value = md.digest(value);
			}
			endValue = DatatypeConverter.printBase64Binary(value);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}

		ComMethods.report("Digest calculated is "+endValue+".", simMode);
		ComMethods.report("Actual digest associated with username is "+hashValue+".", simMode);

		return (endValue.equals(hashValue));
	}



	// Writes to file, replacing user's existing secret with newSecret
	private void replaceSecretWith(String user, String newSecret) {
		try {
			File tmp = File.createTempFile("tmp", "");
		
			BufferedReader br = new BufferedReader(new FileReader(secretsfn));
			BufferedWriter bw = new BufferedWriter(new FileWriter(secretsfn));

			String l;
			while (null != (l = br.readLine())) {
				bw.write(String.format("%s%n", l));
				if (l.equals(user)) {
					l = br.readLine();
					bw.write(String.format("%s%n", newSecret));
				}
			}
			
			br.close();
			bw.close();

			File oldFile = new File(user);
			if (oldFile.delete()) {
				tmp.renameTo(oldFile);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}



	/** Sets the private and public keys of the SecretServer, which are found by
	  * parsing the relevant text files for public keys and private keys of 
	  * registered users of this secret server storage service. 
	  * Also sets up arrays of public keys for all registered users for efficient 
	  * use and access.
	  * NOTE: This is a simulation. In a real setting, the private keys would
	  * be native to individuals' accounts and not stored together in a file. */
	private final void configureKeys() {
		// SecretServer's public key
		String line = ComMethods.getValueFor("SecretServer", pubkeysfn);
		int x = line.indexOf(',');
		my_n = new BigInteger(line.substring(0,x));
		my_e = new Integer(line.substring(x+1,line.length()));

		// SecretServer's private key
		line = ComMethods.getValueFor("SecretServer", privkeysfn);
		x = line.indexOf(',');
		my_d = new BigInteger(line.substring(x+1,line.length()));

		// Public keys for all registered Users
		usersPubKeys1 = new BigInteger[validUsers.length];
		usersPubKeys2 = new int[validUsers.length];
		for (int i=0; i<validUsers.length; i++) {
			line = ComMethods.getValueFor(validUsers[i], pubkeysfn);
			x = line.indexOf(',');
			usersPubKeys1[i] = new BigInteger(line.substring(0,x));
			usersPubKeys2[i] = new Integer(line.substring(x+1,line.length()));
		}
	}
}